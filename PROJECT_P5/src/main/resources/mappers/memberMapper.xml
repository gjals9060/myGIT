<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.clover.p5.member.mapper.MemberMapper">

	<!-- 회원가입 때만 사용 -->
	<insert id="insertMember" parameterType="NewMemberDTO">
		INSERT INTO member
		VALUES
		(
			SEQ_member_id.nextval,
			#{email},
			#{password},
			#{firstName},
			#{lastName},
			#{birthDate},
			#{mobilePhone},
			'N',
			TO_DATE(#{registrationDate}, 'YYYY-MM-DD HH24:MI:SS'),
			NULL
																	)
	</insert>
	
	
	
	
	
	
	<!-- 로그인에만 사용 -->
	<select id="selectMemberByEmail" parameterType="String" resultType="Member">
		SELECT *
		FROM member
		WHERE email = #{email}
	</select>
	
	<!-- 회원 테이블에서 이메일에 해당하는 ID를 검색 -->
	<select id="selectMemberId" parameterType="String" resultType="int">
		SELECT id
		FROM member
		WHERE email = #{userEmail}
	</select>
	<!-- 임시 로그인, session 갱신 등에 사용 -->
	<select id="selectMember" parameterType="int" resultType="Member">
		SELECT *
		FROM member
		WHERE id = #{userId}
	</select>
	
	
	
	
	
	
	<!-- 비밀번호 변경 -->
	<update id="updatePassword">
		UPDATE member
		SET password = #{newPassword}
		WHERE id = #{userId}
	</update>









	<!-- 휴대전화 인증 여부를 검색 -->
	<select id="selectMobileAuthentication" parameterType="int" resultType="String">
		SELECT mobile_authentication
		FROM member
		WHERE id = #{userId}
	</select>
	
	<!-- 휴대전화 인증 결과를 DB에 적용 -->
	<update id="updateMobileAuthentication" parameterType="int">
		UPDATE member
		SET mobile_authentication = 'Y'
		WHERE id = #{userId}
	</update>
		
		
		
		
		
		
		
		
		
		
		<!-- 회원 프로필 사진 목록을 검색 -->
	<select id="selectProfilePhotoList" resultType="ProfilePhoto">
		SELECT *
		FROM profile_photo
		WHERE member_id = #{memberId}
		ORDER BY id
	</select>
	
		<!-- 회원 프로필 사진 유무를 검색 -->
	<select id="selectProfilePhotoCount" resultType="int">
		SELECT count(*)
		FROM profile_photo
		WHERE member_id = #{memberId}
	</select>
	
		<!-- 회원 프로필 사진을 등록  -->
	<insert id="insertProfilePhoto" parameterType="ProfilePhotoVO">
		INSERT INTO profile_photo
		VALUES
		(
			SEQ_profile_photo_id.nextval,
			#{memberId},
			#{originalName},
			#{fileSize},
			#{path},
			'Y'
							)
	</insert>

		<!-- 회원 프로필 사진 삭제 -->
	<delete id="deleteProfilePhoto">
		DELETE
		FROM profile_photo
		WHERE id = #{photoId}
	</delete>
	
		<!-- 프로필 삭제 이후 빈자리 채우기 -->
	<update id="updateAutoProfile">
		UPDATE profile_photo
		SET is_profile = 'Y'
		WHERE id = (
						SELECT MIN(id)
						FROM profile_photo
						WHERE member_id = #{memberId}
														)
	</update>
	
		<!-- 프로필 사진 해제 -->
	<update id="updateIsProfileN">
		UPDATE profile_photo
		SET is_profile = 'N'
		WHERE is_profile = 'Y' AND member_id = #{memberId} 
	</update>

		<!-- 프로필 사진으로 적용 -->
	<update id="updateIsProfileY">
		UPDATE profile_photo
		SET is_profile = 'Y'
		WHERE id = #{photoId}
	</update>

	<!-- 프로필 사진 변경 이후 회원 테이블에 새 경로 저장 -->
	<update id="updateMemberProfilePhotoPath">
		UPDATE member
		SET profile_photo_path = (			<!-- 서브쿼리 결과가 없으면 NULL로 저장됨^^(노렸음) -->
									SELECT path
									FROM profile_photo
									WHERE member_id = #{memberId} AND is_profile = 'Y'
																						)
		WHERE id = #{memberId}
	</update>























</mapper>